spongent_msp

;
; Spongent 160 (for Elephant AEAD) in MSP430 assembler
; ----------------------------------------
;
; written by Christian Franck and Johann Groszsch√§dl
; (c) University of Luxembourg 2023
;
; Optimizations:
; - rotations with integrated sbox to reduce memory access
; - optimized register usage


NAME spongent_msp

PUBLIC spongent_msp


;------------------------------- DEFINITIONS ---------------------------------
 
#define b0 R6
#define b1 R7
#define b2 R8
#define b3 R9

#define t0 R10
#define t1 R11
#define t2 R12

#define tmp   R4
#define ptrM  R5

#define JMPptr R14
#define IVptr R15



SROR macro t, a0, a1, a2, a3

    mov.b   @ptrM+,t
    mov.b   sbox(t),t
    rrc.w   t
    rrc.w   a0
    rrc.w   t
    rrc.w   a1
    rrc.w   t
    rrc.w   a2
    rrc.w   t
    rrc.w   a3
    rrc.w   t
    rrc.w   a0
    rrc.w   t
    rrc.w   a1
    rrc.w   t
    rrc.w   a2
    rrc.w   t
    rrc.w   a3
    
    mov.b   @ptrM+,t
    mov.b   sbox(t),t
    rrc.w   t
    rrc.w   a0
    rrc.w   t
    rrc.w   a1
    rrc.w   t
    rrc.w   a2
    rrc.w   t
    rrc.w   a3
    rrc.w   t
    rrc.w   a0
    rrc.w   t
    rrc.w   a1
    rrc.w   t
    rrc.w   a2
    rrc.w   t
    rrc.w   a3

    mov.b   @ptrM+,t
    mov.b   sbox(t),t
    rrc.w   t
    rrc.w   a0
    rrc.w   t
    rrc.w   a1
    rrc.w   t
    rrc.w   a2
    rrc.w   t
    rrc.w   a3
    rrc.w   t
    rrc.w   a0
    rrc.w   t
    rrc.w   a1
    rrc.w   t
    rrc.w   a2
    rrc.w   t
    rrc.w   a3
    
    mov.b   @ptrM+,t
    mov.b   sbox(t),t
    rrc.w   t
    rrc.w   a0
    rrc.w   t
    rrc.w   a1
    rrc.w   t
    rrc.w   a2
    rrc.w   t
    rrc.w   a3
    rrc.w   t
    rrc.w   a0
    rrc.w   t
    rrc.w   a1
    rrc.w   t
    rrc.w   a2
    rrc.w   t
    rrc.w   a3
    
    endm
    


;----------------------------------- DATA ------------------------------------


m0:       ; temp storage
    DS 2
m1:    
    DS 2
m2:    
    DS 2
m3:    
    DS 2
m4:    
    DS 2
m5:    
    DS 2
m6:    
    DS 2
m7:    
    DS 2
m8:    
    DS 2
m9:    
    DS 2


RSEG CODE


asm_begin:


IVs:
    dc8    0x75, 0xae, 0x6a, 0x56, 0x54, 0x2a, 0x29, 0x94
    dc8    0x53, 0xca, 0x27, 0xe4, 0x4f, 0xf2, 0x1f, 0xf8
    dc8    0x3e, 0x7c, 0x7d, 0xbe, 0x7a, 0x5e, 0x74, 0x2e
    dc8    0x68, 0x16, 0x50, 0x0a, 0x21, 0x84, 0x43, 0xc2
    dc8    0x07, 0xe0, 0x0e, 0x70, 0x1c, 0x38, 0x38, 0x1c
    dc8    0x71, 0x8e, 0x62, 0x46, 0x44, 0x22, 0x09, 0x90
    dc8    0x12, 0x48, 0x24, 0x24, 0x49, 0x92, 0x13, 0xc8
    dc8    0x26, 0x64, 0x4d, 0xb2, 0x1b, 0xd8, 0x36, 0x6c
    dc8    0x6d, 0xb6, 0x5a, 0x5a, 0x35, 0xac, 0x6b, 0xd6
    dc8    0x56, 0x6a, 0x2d, 0xb4, 0x5b, 0xda, 0x37, 0xec
    dc8    0x6f, 0xf6, 0x5e, 0x7a, 0x3d, 0xbc, 0x7b, 0xde
    dc8    0x76, 0x6e, 0x6c, 0x36, 0x58, 0x1a, 0x31, 0x8c
    dc8    0x63, 0xc6, 0x46, 0x62, 0x0d, 0xb0, 0x1a, 0x58
    dc8    0x34, 0x2c, 0x69, 0x96, 0x52, 0x4a, 0x25, 0xa4
    dc8    0x4b, 0xd2, 0x17, 0xe8, 0x2e, 0x74, 0x5d, 0xba
    dc8    0x3b, 0xdc, 0x77, 0xee, 0x6e, 0x76, 0x5c, 0x3a
    dc8    0x39, 0x9c, 0x73, 0xce, 0x66, 0x66, 0x4c, 0x32
    dc8    0x19, 0x98, 0x32, 0x4c, 0x65, 0xa6, 0x4a, 0x52
    dc8    0x15, 0xa8, 0x2a, 0x54, 0x55, 0xaa, 0x2b, 0xd4
    dc8    0x57, 0xea, 0x2f, 0xf4, 0x5f, 0xfa, 0x3f, 0xfc
    dc8    0x00, 0x00
    
jumps:
    dc16 step1, step2 , step3 ,step4, step5

sbox:
    dc8    0xee, 0xed, 0xeb, 0xe0, 0xe2, 0xe1, 0xe4, 0xef
    dc8    0xe7, 0xea, 0xe8, 0xe5, 0xe9, 0xec, 0xe3, 0xe6
    dc8    0xde, 0xdd, 0xdb, 0xd0, 0xd2, 0xd1, 0xd4, 0xdf
    dc8    0xd7, 0xda, 0xd8, 0xd5, 0xd9, 0xdc, 0xd3, 0xd6
    dc8    0xbe, 0xbd, 0xbb, 0xb0, 0xb2, 0xb1, 0xb4, 0xbf
    dc8    0xb7, 0xba, 0xb8, 0xb5, 0xb9, 0xbc, 0xb3, 0xb6
    dc8    0x0e, 0x0d, 0x0b, 0x00, 0x02, 0x01, 0x04, 0x0f
    dc8    0x07, 0x0a, 0x08, 0x05, 0x09, 0x0c, 0x03, 0x06
    dc8    0x2e, 0x2d, 0x2b, 0x20, 0x22, 0x21, 0x24, 0x2f
    dc8    0x27, 0x2a, 0x28, 0x25, 0x29, 0x2c, 0x23, 0x26
    dc8    0x1e, 0x1d, 0x1b, 0x10, 0x12, 0x11, 0x14, 0x1f
    dc8    0x17, 0x1a, 0x18, 0x15, 0x19, 0x1c, 0x13, 0x16
    dc8    0x4e, 0x4d, 0x4b, 0x40, 0x42, 0x41, 0x44, 0x4f
    dc8    0x47, 0x4a, 0x48, 0x45, 0x49, 0x4c, 0x43, 0x46
    dc8    0xfe, 0xfd, 0xfb, 0xf0, 0xf2, 0xf1, 0xf4, 0xff
    dc8    0xf7, 0xfa, 0xf8, 0xf5, 0xf9, 0xfc, 0xf3, 0xf6
    dc8    0x7e, 0x7d, 0x7b, 0x70, 0x72, 0x71, 0x74, 0x7f
    dc8    0x77, 0x7a, 0x78, 0x75, 0x79, 0x7c, 0x73, 0x76
    dc8    0xae, 0xad, 0xab, 0xa0, 0xa2, 0xa1, 0xa4, 0xaf
    dc8    0xa7, 0xaa, 0xa8, 0xa5, 0xa9, 0xac, 0xa3, 0xa6
    dc8    0x8e, 0x8d, 0x8b, 0x80, 0x82, 0x81, 0x84, 0x8f
    dc8    0x87, 0x8a, 0x88, 0x85, 0x89, 0x8c, 0x83, 0x86
    dc8    0x5e, 0x5d, 0x5b, 0x50, 0x52, 0x51, 0x54, 0x5f
    dc8    0x57, 0x5a, 0x58, 0x55, 0x59, 0x5c, 0x53, 0x56
    dc8    0x9e, 0x9d, 0x9b, 0x90, 0x92, 0x91, 0x94, 0x9f
    dc8    0x97, 0x9a, 0x98, 0x95, 0x99, 0x9c, 0x93, 0x96
    dc8    0xce, 0xcd, 0xcb, 0xc0, 0xc2, 0xc1, 0xc4, 0xcf
    dc8    0xc7, 0xca, 0xc8, 0xc5, 0xc9, 0xcc, 0xc3, 0xc6
    dc8    0x3e, 0x3d, 0x3b, 0x30, 0x32, 0x31, 0x34, 0x3f
    dc8    0x37, 0x3a, 0x38, 0x35, 0x39, 0x3c, 0x33, 0x36
    dc8    0x6e, 0x6d, 0x6b, 0x60, 0x62, 0x61, 0x64, 0x6f
    dc8    0x67, 0x6a, 0x68, 0x65, 0x69, 0x6c, 0x63, 0x66


;------------------------------- MAIN FUNCTION -------------------------------



// compute permutation ----------------------------------


spongent_msp: ; parameters : R12 pointer to state
  
    PUSH.W  R4
    PUSH.W  R5
    PUSH.W  R6
    PUSH.W  R7
    PUSH.W  R8
    PUSH.W  R9
    PUSH.W  R10
    PUSH.W  R11
    
    
    ; load state into registers and add IV

    MOV.W   #IVs,IVptr      ; table
    PUSH.W  R12
    
    MOV.W   @R12+,tmp     
    MOV.B   @IVptr+,t0
    XOR.W   t0,tmp
    MOV.W   tmp,m0     
    MOV.W   @R12+,m1
    MOV.W   @R12+,m2
    MOV.W   @R12+,m3
    MOV.W   @R12+,m4
    MOV.W   @R12+,m5
    MOV.W   @R12+,m6
    MOV.W   @R12+,m7
    MOV.W   @R12+,m8
    MOV.W   @R12+,tmp
    MOV.B   @IVptr+,t0
    SWPB    t0
    XOR.W   t0,tmp
    MOV.W   tmp,m9     

loop:

    MOV.W  #m0,ptrM
    mov.w  #jumps,JMPptr

step0:
    SROR    tmp, b0,b1,b2,b3      ; 0,1

    mov.w  @JMPptr+,R0

step1:
    mov.w   b1,t0
    mov.w   b3,t1

    jmp step0
;    SROR    tmp, b0,b1,b2,b3      ; 2,3

step2:
    MOV.B   @IVptr+,tmp
    XOR.W   tmp,b0
    MOV.W   b0,m0
    mov.w   b2,t2

    jmp step0
;    SROR    tmp, b0,b1,b2,b3      ; 4,5

step3:
    MOV.W  b1,m3
    MOV.W  t2,m5
    MOV.W  b3,t2
    
    jmp step0
;    SROR    tmp, b0,b1,b2,b3      ; 6,7

step4:
    MOV.W  b0,m1
    MOV.W  b2,m6

    MOV.W  t0,b0
    MOV.W  t1,b2

    jmp step0
;    SROR    tmp, b0,b1,b2,b3      ; 8,9

step5:
    MOV.W  b1,m4
    MOV.W  t2,m8
    
    swpb    b0
    swpb    b2
    MOV.W   b0,m2
    MOV.W   b2,m7

    MOV.B   @IVptr+,tmp
    SWPB    tmp
    XOR.W   tmp,b3   
    MOV.W   b3,m9


    cmp.w   #0, tmp
    jne     loop

loop_end:

    POP.W   tmp
        
    MOV.W   m0,0(tmp)
    MOV.W   m1,2(tmp)
    MOV.W   m2,4(tmp)
    MOV.W   m3,6(tmp)
    MOV.W   m4,8(tmp)
    MOV.W   m5,10(tmp)
    MOV.W   m6,12(tmp)
    MOV.W   m7,14(tmp)
    MOV.W   m8,16(tmp)
    MOV.W   m9,18(tmp)

    POP.W   R11
    POP.W   R10
    POP.W   R9
    POP.W   R8
    POP.W   R7
    POP.W   R6
    POP.W   R5
    POP.W   R4
    RET
    
asm_end:
END

