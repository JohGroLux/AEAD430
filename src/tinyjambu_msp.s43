///////////////////////////////////////////////////////////////////////////////
// tinyjambu_msp.s43: MSP430 Asm implementation of TinyJambu permutation.    //
// Version 1.0.1 (25-08-22), see <http://github.com/johgrolux/> for updates. //
// License: GPLv3 (see LICENSE file), other licenses available upon request. //
// ------------------------------------------------------------------------- //
// This source code is free software: you can redistribute it and/or modify  //
// it under the terms of the GNU General Public License as published by the  //
// Free Software Foundation, either version 3 of the License, or (at your    //
// option) any later version. This source code is distributed in the hope    //
// that it will be useful, but WITHOUT ANY WARRANTY; without even the        //
// implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  //
// See the GNU General Public License for more details. You should have      //
// received a copy of the GNU General Public License along with this source  //
// code. If not, see <http://www.gnu.org/licenses/>.                         //
///////////////////////////////////////////////////////////////////////////////


// Function prototype:
// -------------------
// void state_update_msp(uint32_t *state, const uint8_t *key, int steps)
//
// Parameters:
// -----------
// `state`: pointer to an uint32-array containing 4 state-words
// `key`: pointer to an uint8-array containing 16 key-bytes
// `steps`: number of steps (must be a multiple of 128)
//
// Return value:
// -------------
// None


name tinyjambu              // module name
rseg CODE(2)                // place module in 'CODE' segment with alignment 4


///////////////////////////////////////////////////////////////////////////////
//////////////////////// REGISTER NAMES AND CONSTANTS /////////////////////////
///////////////////////////////////////////////////////////////////////////////


// Registers for the four 32-bit state-words
#define s0l r4
#define s0h r5
#define s1l r6
#define s1h r7
#define s2l r8
#define s2h r9
#define s3l r10
#define s3h r11

// Registers for temporary values ta and tb
#define tal r12
#define tah r13
#define tbl r14
#define tbh r15

// Pointer-registers for the state and key
#define sptr r12
#define kptr r13

// Number of steps (serves as step-counter)
#define steps r14


///////////////////////////////////////////////////////////////////////////////
/////// MACROS FOR QUAD-BYTE (32-BIT) ARITHMETIC AND LOGICAL OPERATIONS  //////
///////////////////////////////////////////////////////////////////////////////


// The macro `QAND` bitwise ANDs two quad-byte operands: A = A & B. An implicit
// 16-bit rotation of operand B is possible, i.e. the macro can also perform an
// operation of the form A = A ^ (B >>> 16).

QAND macro b0, b1, a0, a1
    and.w   b0, a0
    and.w   b1, a1
    endm


// The macro `QXOR` bitwise XORs two quad-byte operands: A = A ^ B. An implicit
// 16-bit rotation of operand B is possible, i.e. the macro can also perform an
// operation of the form A = A ^ (B >>> 16).

QXOR macro b0, b1, a0, a1
    xor.w   b0, a0
    xor.w   b1, a1
    endm


// The macro `QMOV` moves a quad-byte operand: A = B.

QMOV macro b0, b1, a0, a1
    mov.w   b0, a0
    mov.w   b1, a1
    endm


// The macro `QINV` bitwise inverts a quad-byte operand, whereby the inversion
// is performed in place: A = ~A.

QINV macro a0, a1
    inv.w   a0
    inv.w   a1
    endm


// The macro `QSHLC` shifts a quad-byte operand one bit left through carry,
// whereby the shift is performed in place: A = A << 1.

QSHLC macro a0, a1
    rlc.w   a0
    rlc.w   a1
    endm


///////////////////////////////////////////////////////////////////////////////
/////// MACROS FOR OCTA-BYTE (64-BIT) ARITHMETIC AND LOGICAL OPERATIONS  //////
///////////////////////////////////////////////////////////////////////////////


// The macro `OSHLC` shifts an octa-byte operand one bit left through carry,
// whereby the shift is performed in place: A = A << 1.

OSHLC macro a0, a1, a2, a3
    rlc.w   a0
    rlc.w   a1
    rlc.w   a2
    rlc.w   a3
    endm


// The macro `OSHL4` shifts an octa-byte operand four bits left, whereby the
// shift is performed in place: A = A << 4.

OSHL4 macro a0, a1, a2, a3
    rla.w   a0
    rlc.w   a1
    rlc.w   a2
    rlc.w   a3
    rla.w   a0
    rlc.w   a1
    rlc.w   a2
    rlc.w   a3
    rla.w   a0
    rlc.w   a1
    rlc.w   a2
    rlc.w   a3
    rla.w   a0
    rlc.w   a1
    rlc.w   a2
    rlc.w   a3
    endm


///////////////////////////////////////////////////////////////////////////////
///////////////// HELPER MACROS FOR THE TINYJAMBU PERMUTATION /////////////////
///////////////////////////////////////////////////////////////////////////////


// The macro `PROLOGUE` pushes all callee-saved registers on the stack.

PROLOGUE macro
    push.w  r4
    push.w  r5
    push.w  r6
    push.w  r7
    push.w  r8
    push.w  r9
    push.w  r10
    push.w  r11
    endm


// The macro `EPILOGUE` pops all callee-saved registers from the stack and
// returns to the caller.

EPILOGUE macro
    pop.w   r11
    pop.w   r10
    pop.w   r9
    pop.w   r8
    pop.w   r7
    pop.w   r6
    pop.w   r5
    pop.w   r4
    ret
    endm


// The macro `LDSTATE` loads the four state-words from RAM and puts them in the
// registers `s0l`-`s3h`. Furthermore, the pointer `sptr` is pushed on the
// stack.

LDSTATE macro
    mov.w   @sptr+, s0l
    mov.w   @sptr+, s0h
    mov.w   @sptr+, s1l
    mov.w   @sptr+, s1h
    mov.w   @sptr+, s2l
    mov.w   @sptr+, s2h
    mov.w   @sptr+, s3l
    mov.w   @sptr , s3h
    sub.w   #14, sptr
    push.w  sptr
    push.w  kptr
    endm


// The macro `STSTATE` removes removes `kptr` and `steps` from the stack (the
// former was pushed by macro `LDSTATE` and the latter right before entering
// the step-loop), pops the pointer `sptr` from the stack and stores the four
// state-words in the registers `s0l`-`s3h` to RAM.

STSTATE macro
    add.w   #4, sp
    pop.w   sptr
    mov.w   s0l, 0(sptr)
    mov.w   s0h, 2(sptr)
    mov.w   s1l, 4(sptr)
    mov.w   s1h, 6(sptr)
    mov.w   s2l, 8(sptr)
    mov.w   s2h, 10(sptr)
    mov.w   s3l, 12(sptr)
    mov.w   s3h, 14(sptr)
    endm


///////////////////////////////////////////////////////////////////////////////
//////////////////// MACROS FOR THE TINYJAMBU STATE-UPDATE ////////////////////
///////////////////////////////////////////////////////////////////////////////


// The macro `COMPT32` computes the four temporary words `t0`-`t4` and updates
// a 32-bit word of the state (i.e. it computes 32 rounds of the permutation in
// parallel). There are three 32-bit input words (left, middle, right) and one
// 32-bit output word (result). For example, when udating `state[0]`, the three
// input words are `state[1]` (left), `state[2]` (middle), and `state[3]`
// (right).

COMPT32 macro lel, leh, mil, mih, ril, rih, rsl, rsh
    // compute s[0] ^= t0
    mov     leh, tal
    bit.w   #0x8000, lel
    rlc.w   tal
    xor.w   tal, rsl
    QMOV    mil, mih, tal, tah
    QMOV    ril, rih, tbl, tbh
    bit.w   #0x8000, leh
    OSHLC   tal, tah, tbl, tbh
    xor.w   tal, rsh
    // compute s[0] ^= t3
    OSHL4   tal, tah, tbl, tbh
    QXOR    tbl, tbh, rsl, rsh
    // compute t1 (in tah, tbl)
    OSHL4   tal, tah, tbl, tbh
    OSHLC   tal, tah, tbl, tbh
    // compute t2 (in tbh, tal)
    QMOV    tbh, tbl, tal, tbh
    bit.w   #0x8000, tah
    QSHLC   tbh, tal
    // compute s[0] ^= ~(t1 & t2)
    QAND    tal, tah, tbl, tbh
    QINV    tbl, tbh
    QXOR    tbl, tbh, rsh, rsl
    endm


// The macro `ADDRKEY` adds a 32-bit word of the round-key to a 32-bit word of
// the state. The pointer to the round-key-array is on the stack (it was pushed
// by macro `LDSTATE`) and has to be loaded first (note that `steps` is on the
// top of the stack; right before entering the step-loop). The offset values
// `ofl` and `ofh` determine which 32-bit key-word is added to the state-word
// in registers `a0` and `a1`.

ADDRKEY macro ofl, ofh, a0, a1
    mov.w   2(sp), kptr
    xor.w   ofl(kptr), a0
    xor.w   ofh(kptr), a1
    endm


// The macro `STUPD128` updates the full 128-bit state of the permutation, i.e.
// it executes 128 rounds of the state-update operation.

macro STUPD128
    COMPT32 s1l, s1h, s2l, s2h, s3l, s3h, s0l, s0h
    ADDRKEY 0, 2, s0l, s0h
    COMPT32 s2l, s2h, s3l, s3h, s0l, s0h, s1l, s1h
    ADDRKEY 4, 6, s1l, s1h
    COMPT32 s3l, s3h, s0l, s0h, s1l, s1h, s2l, s2h
    ADDRKEY 8, 10, s2l, s2h
    COMPT32 s0l, s0h, s1l, s1h, s2l, s2h, s3l, s3h
    ADDRKEY 12, 14, s3l, s3h
    endm


///////////////////////////////////////////////////////////////////////////////
//////////////////////////// TINYJAMBU PERMUTATION ////////////////////////////
///////////////////////////////////////////////////////////////////////////////


align 2
public state_update_msp
state_update_msp:
    PROLOGUE                // push callee-saved registers
    LDSTATE                 // load the full state from RAM
    push.w steps            // step-counter on stack (we need registers!)
STEPLOOP:                   // start of step-loop
    STUPD128                // macro for update of the full 128-bit state
    sub.w #128, 0(sp)       // decrement step-counter (on stack!) by 128
    jnz STEPLOOP            // jump back to start of loop if step-counter != 0
    STSTATE                 // store the full state in RAM
    EPILOGUE                // pop callee-saved registers and return


end
