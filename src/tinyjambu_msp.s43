///////////////////////////////////////////////////////////////////////////////
// tinyjambu_msp.s43: MSP430 Asm implementation of TinyJambu permutation.    //
// Version 1.0.0 (30-05-22), see <http://github.com/johgrolux/> for updates. //
// License: GPLv3 (see LICENSE file), other licenses available upon request. //
// ------------------------------------------------------------------------- //
// This source code is free software: you can redistribute it and/or modify  //
// it under the terms of the GNU General Public License as published by the  //
// Free Software Foundation, either version 3 of the License, or (at your    //
// option) any later version. This source code is distributed in the hope    //
// that it will be useful, but WITHOUT ANY WARRANTY; without even the        //
// implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  //
// See the GNU General Public License for more details. You should have      //
// received a copy of the GNU General Public License along with this source  //
// code. If not, see <http://www.gnu.org/licenses/>.                         //
///////////////////////////////////////////////////////////////////////////////


// Function prototype:
// -------------------
// void state_update_msp(uint32_t *state, const uint8_t *key, int steps)
//
// Parameters:
// -----------
// `state`: pointer to an uint32-array containing 4 state-words
// `key`: pointer to an uint8-array containing 16 key-bytes
// `steps`: number of steps (must be a multiple of 128)
//
// Return value:
// -------------
// None


name tinyjambu              // module name
rseg CODE(2)                // place module in 'CODE' segment with alignment 4


///////////////////////////////////////////////////////////////////////////////
//////////////////////// REGISTER NAMES AND CONSTANTS /////////////////////////
///////////////////////////////////////////////////////////////////////////////


// pointer to state-array
#define sptr r12
// step-counter
#define scnt r12
// pointer to key-array
#define kptr r13
// number of steps
#define steps r14


; state registers
#define s0l r4
#define s0h r5
#define s1l r6
#define s1h r7
#define s2l r8
#define s2h r9
#define s3l r10
#define s3h r11

; temporary registers
#define tmp r14

#define t0l r14
#define t0h r14
#define t1l r15
#define t1h r15
#define t2l r14
#define t2h r14
#define t3l r15
#define t3h r15


///////////////////////////////////////////////////////////////////////////////
///////////////// HELPER MACROS FOR THE TINYJAMBU PERMUTATION /////////////////
///////////////////////////////////////////////////////////////////////////////


// The macro `PROLOGUE` pushes all callee-saved registers on the stack.

PROLOGUE macro
    push.w  r4
    push.w  r5
    push.w  r6
    push.w  r7
    push.w  r8
    push.w  r9
    push.w  r10
    push.w  r11
    endm


// The macro `EPILOGUE` pops all callee-saved registers from the stack and
// returns to the caller.

EPILOGUE macro
    pop.w   r11
    pop.w   r10
    pop.w   r9
    pop.w   r8
    pop.w   r7
    pop.w   r6
    pop.w   r5
    pop.w   r4
    ret
    endm


// The macro `LDSTATE` loads the four state-words from RAM and puts them in the
// registers `s0l`-`s3h`. Furthermore, the pointer `sptr` is pushed on the
// stack.

LDSTATE macro
    mov.w   @sptr+, s0l
    mov.w   @sptr+, s0h
    mov.w   @sptr+, s1l
    mov.w   @sptr+, s1h
    mov.w   @sptr+, s2l
    mov.w   @sptr+, s2h
    mov.w   @sptr+, s3l
    mov.w   @sptr , s3h
    sub.w   #14, sptr
    push.w  sptr
    endm


// The macro `STSTATE` pops the pointer `sptr` from the stack and stores the
// four state-words in the registers `s0l`-`s3h` to RAM.

STSTATE macro
    pop.w   sptr
    mov.w   s0l, 0(sptr)
    mov.w   s0h, 2(sptr)
    mov.w   s1l, 4(sptr)
    mov.w   s1h, 6(sptr)
    mov.w   s2l, 8(sptr)
    mov.w   s2h, 10(sptr)
    mov.w   s3l, 12(sptr)
    mov.w   s3h, 14(sptr)
    endm


///////////////////////////////////////////////////////////////////////////////
////////////////// MACROS FOR THE COMPUTATION OF THE T-WORDS //////////////////
///////////////////////////////////////////////////////////////////////////////


// The macro `COMPHT0` computes one half (i.e. 16 bits) of the temporary word
// T0: ht0 = (sri >> 15) | (sle << 1).

COMPHT0 macro sri, sle, ht0
    mov.w   sle, ht0
    bit.w   #0x8000, sri
    rlc.w   ht0
    endm


// The macro `COMPHT1` computes one half (i.e. 16 bits) of the temporary word
// T1: ht1 = (sri >> 6) | (sle << 10).

COMPHT1 macro sri, sle, ht1
    mov.w   sri, ht1
    bit.w   #0x01, sle
    rrc.w   ht1
    bit.w   #0x02, sle
    rrc.w   ht1
    bit.w   #0x04, sle
    rrc.w   ht1
    bit.w   #0x08, sle
    rrc.w   ht1
    bit.w   #0x10, sle
    rrc.w   ht1
    bit.w   #0x20, sle
    rrc.w   ht1
    endm


// The macro `COMPHT2` computes one half (i.e. 16 bits) of the temporary word
// T2: ht1 = (sri >> 5) | (sle << 11).

COMPHT2 macro sri, sle, ht2
    mov.w   sri, ht2
    bit.w   #0x01, sle
    rrc.w   ht2
    bit.w   #0x02, sle
    rrc.w   ht2
    bit.w   #0x04, sle
    rrc.w   ht2
    bit.w   #0x08, sle
    rrc.w   ht2
    bit.w   #0x10, sle
    rrc.w   ht2
    endm


// The macro `COMPHT3` computes one half (i.e. 16 bits) of the temporary word
// T3: ht3 = (sri >> 11) | (sle << 5). This macro requires a temporary register
// `tmp`.

COMPHT3 macro sri, sle, ht3
    mov.w   sle, ht3
    mov.w   sri, tmp
    rlc.w   tmp
    rlc.w   ht3
    rlc.w   tmp
    rlc.w   ht3
    rlc.w   tmp
    rlc.w   ht3
    rlc.w   tmp
    rlc.w   ht3
    rlc.w   tmp
    rlc.w   ht3
    endm


///////////////////////////////////////////////////////////////////////////////
//////////////////// MACROS FOR THE TINYJAMBU STATE-UPDATE ////////////////////
///////////////////////////////////////////////////////////////////////////////


// The macro `UPDATES0` updates the state-word `state[0]`. The macro `COMPHT3`
// has to be executed before `COMPHT0` so that one of the registers of T0 can
// be used as `tmp`.

UPDATES0 macro
   COMPHT3  s2h, s3l, t3l
   COMPHT0  s1l, s1h, t0l
   xor.w    t3l, s0l
   xor.w    t0l, s0l
   COMPHT1  s2l, s2h, t1l
   COMPHT2  s2h, s3l, t2l
   and.w    t2l, t1l
   inv.w    t1l
   xor.w    t1l, s0l
   xor.w    @kptr+, s0l
   COMPHT3  s3l, s3h, t3h
   COMPHT0  s1h, s2l, t0h
   xor.w    t3h, s0h
   xor.w    t0h, s0h
   COMPHT1  s2h, s3l, t1h
   COMPHT2  s3l, s3h, t2h
   and.w    t2h, t1h
   inv.w    t1h
   xor.w    t1h, s0h
   xor.w    @kptr+, s0h
   endm


// The macro `UPDATES1` updates the state-word `state[1]`. The macro `COMPHT3`
// has to be executed before `COMPHT0` so that one of the registers of T0 can
// be used as `tmp`.

UPDATES1 macro
   COMPHT3  s3h, s0l, t3l
   COMPHT0  s2l, s2h, t0l
   xor.w    t3l, s1l
   xor.w    t0l, s1l
   COMPHT1  s3l, s3h, t1l
   COMPHT2  s3h, s0l, t2l
   and.w    t2l, t1l
   inv.w    t1l
   xor.w    t1l, s1l
   xor.w    @kptr+, s1l
   COMPHT3  s0l, s0h, t3h
   COMPHT0  s2h, s3l, t0h
   xor.w    t3h, s1h
   xor.w    t0h, s1h
   COMPHT1  s3h, s0l, t1h
   COMPHT2  s0l, s0h, t2h
   and.w    t2h, t1h
   inv.w    t1h
   xor.w    t1h, s1h
   xor.w    @kptr+, s1h
   endm


// The macro `UPDATES2` updates the state-word `state[2]`. The macro `COMPHT3`
// has to be executed before `COMPHT0` so that one of the registers of T0 can
// be used as `tmp`.

UPDATES2 macro
   COMPHT3  s0h, s1l, t3l
   COMPHT0  s3l, s3h, t0l
   xor.w    t3l, s2l
   xor.w    t0l, s2l
   COMPHT1  s0l, s0h, t1l
   COMPHT2  s0h, s1l, t2l
   and.w    t2l, t1l
   inv.w    t1l
   xor.w    t1l, s2l
   xor.w    @kptr+, s2l
   COMPHT3  s1l, s1h, t3h
   COMPHT0  s3h, s0l, t0h
   xor.w    t3h, s2h
   xor.w    t0h, s2h
   COMPHT1  s0h, s1l, t1h
   COMPHT2  s1l, s1h, t2h
   and.w    t2h, t1h
   inv.w    t1h
   xor.w    t1h, s2h
   xor.w    @kptr+, s2h
   endm


// The macro `UPDATES3` updates the state-word `state[3]`. The macro `COMPHT3`
// has to be executed before `COMPHT0` so that one of the registers of T0 can
// be used as `tmp`.

UPDATES3 macro
   COMPHT3  s1h, s2l, t3l
   COMPHT0  s0l, s0h, t0l
   xor.w    t3l, s3l
   xor.w    t0l, s3l
   COMPHT1  s1l, s1h, t1l
   COMPHT2  s1h, s2l, t2l
   and.w    t2l, t1l
   inv.w    t1l
   xor.w    t1l, s3l
   xor.w    @kptr+, s3l
   COMPHT3  s2l, s2h, t3h
   COMPHT0  s0h, s1l, t0h
   xor.w    t3h, s3h
   xor.w    t0h, s3h
   COMPHT1  s1h, s2l, t1l
   COMPHT2  s2l, s2h, t2l
   and.w    t2l, t1l
   inv.w    t1l
   xor.w    t1l, s3h
   xor.w    @kptr, s3h
   sub.w    #14, kptr
   endm


///////////////////////////////////////////////////////////////////////////////
//////////////////////////// TINYJAMBU PERMUTATION ////////////////////////////
///////////////////////////////////////////////////////////////////////////////


align 2
public state_update_msp
state_update_msp:
    PROLOGUE                // push callee-saved registers
    LDSTATE                 // load the full state from RAM
    mov.w steps, scnt       // initialize step-counter
STEPLOOP:                   // start of step-loop
    UPDATES0                // macro for update of 32-bit word state[0]
    UPDATES1                // macro for update of 32.bit word state[1]
    UPDATES2                // macro for update of 32.bit word state[2]
    UPDATES3                // macro for update of 32.bit word state[3]
    sub.w #128, scnt        // decrement step-counter by 128
    jnz STEPLOOP            // jump back to start of loop if step-counter != 0
    STSTATE                 // store the full state in RAM
    EPILOGUE                // pop callee-saved registers and return


END
